@model ProductPageViewModel
@inject IMainRepository _repository
@inject Microsoft.AspNetCore.Hosting.IHostingEnvironment _hostingEnvironment

@{
    ViewData["Title"] = "Product page";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<link href="~/css/comments.css" rel="stylesheet" type="text/css" />
<link href="~/css/images.css" rel="stylesheet" type="text/css" />
<link href="~/css/ratingtable.css" rel="stylesheet" type="text/css" />

<script src="https://code.jquery.com/jquery-1.12.0.min.js"></script>
<style>
    .checked {
        color: orange;
    }

    .not-checked {
        color: #ddd;
    }
</style>

@{
    var product = CatalogViewModel.GetSelectedBuyProduct(_repository);

    @if (product.OwnerID != CatalogViewModel.CurrentUser.ID)
    {
        <div class="float-right">
            <h2>@CatalogViewModel.CurrentUser.MoneyString</h2>
        </div>
    }
    <h1>@product.Name</h1>
    <br>


    @if (product.OwnerID == CatalogViewModel.CurrentUser.ID)
    {
        <div style="padding-bottom:1em"></div>
        <form class="d-inline" asp-controller="Product" asp-action="OpenEditProduct" method="post">
            <div class="d-inline" @*style="padding-bottom:1em"*@>
                <input type="hidden" class="form-control" name="prodId" value="@product.ID" />
                <button asp-controller="Product" asp-action="OpenEditProduct" type="submit" class="btn btn-primary">Edit Product</button>
            </div>
        </form>
        <div class="d-inline">
            <button type="button" class="btn btn-primary">Edit Page</button>
        </div>
    }
    <div style="padding-bottom:1em"></div>


    <div class="float-left" style="padding-right:2em">
        <div class="card bg-light mb-3" style="max-width: 28rem;">
            @*<div class="card-header">About</div>*@
            <div class="card-body">
                <h5 class="card-title">About</h5>
                @if (product.OwnerID == CatalogViewModel.CurrentUser.ID)
                {
                    <p class="card-text">Owner: <b>You</b></p>
                }
                else
                {
                    <p class="catd-text">Owner: <b>@product.GetOwnerName()</b></p>
                }
                <p>Added at: <b>@product.AddedDate.ToShortDateString()</b></p>
                <hr />
                <p class="card-text"><b>Current version: 1.0.0</b></p>
                <p></p>
                @if ((product.IsBought(_repository) || product.OwnerID == CatalogViewModel.CurrentUser.ID) && product.FileName?.Length > 0)
                {
                    <p class="card-text float-right">Size: @product.FormatFileSize(_hostingEnvironment)</p>
                    <a class="card-link btn btn-primary" href="~/file/@product.FileName" download>Download</a>
                }
                <p></p>
            </div>
        </div>
    </div>

    <div class="card h-100 hoverable-card" id="card_on_transaction">
        <div class="card-header @product.GetTableHeaderClassString(_repository)" id="card_on_transaction_header">
            <h5 style="font-weight:300">@product.Type</h5>
        </div>
        <div style="transform:rotate(0);">
            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                <ol class="carousel-indicators">
                    <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                    <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                    <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
                </ol>
                <div class="carousel-inner">
                    <div class="carousel-item active hoverable-img">
                        <div class="carousel-caption d-none d-md-block">
                            <p class="hoverable-img-p">@_repository.GetImageByOrderIndex(product.ID, 0)?.Description</p>
                        </div>
                        <img class="d-block w-100 img-fluid catalog-img catalog-buy" src="@product.GetFirstImageSrc(_repository)" alt="First slide">
                    </div>
                    <div class="carousel-item hoverable-img">
                        <div class="carousel-caption d-none d-md-block">
                            <p class="hoverable-img-p">@_repository.GetImageByOrderIndex(product.ID, 1)?.Description</p>
                        </div>
                        <img class="d-block w-100 img-fluid catalog-img catalog-buy" src="@product.GetSecondImageSrc(_repository)" alt="Second slide">
                    </div>
                    <div class="carousel-item hoverable-img">
                        <div class="carousel-caption d-none d-md-block">
                            <p class="hoverable-img-p">@_repository.GetImageByOrderIndex(product.ID, 2)?.Description</p>
                        </div>
                        <img class="d-block w-100 img-fluid catalog-img catalog-buy" src="@product.GetThirdImageSrc(_repository)" alt="Third slide">
                    </div>
                </div>
                <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </div>
        <div class="card-body" style="transform:rotate(0);">
            <h4 class="card-title">
                @product.Name
            </h4>
            <div class="overflower" aria-hidden="true">
                <p class="card-text card-description">@product.Description</p>
                @{
                    foreach (var i in /*product.Tags*/_repository.GetTagsByProductID(product.ID))
                    {
                        <span class="badge badge-pill badge-primary">@i.Text</span>
                    }
                }
            </div>
            @*<a href="@product.Link" class="stretched-link"></a>*@
        </div>

        <div class="card-footer @product.GetTableHeaderClassString(_repository)" id="card_on_transaction_footer">

            @*<div class="float-right">*@
            <h3>
                @product.FinalPriceString
                <sup>
                    @if (product.Price != product.FinalPrice)
                    {
                        <font color="red" style="font-weight:400"><del>@product.PriceString</del></font><sup> -@product.DiscountSupString</sup>
                    }
                </sup>
            </h3>

            @if (product.OwnerID == CatalogViewModel.CurrentUser.ID)
            {
                <small class="text-warning @product.GetProductTableLinkClassString(_repository)">
                    Added @product.AddedDate.ToShortDateString()
                </small>
            }
            else if (!/*CatalogViewModel.CurrentUser.HasProductBought(product.ID, _repository)*/product.IsBought(_repository))
            {
                <div class="float-right">
                    <form asp-controller="Catalog" asp-action="BuyProduct" method="post">
                        <input type="hidden" class="form-control" name="productName" id="productName" value=@product.Name />
                        <input type="hidden" class="form-control" name="productID" id="productID" value=@product.ID />
                        <button class="@CatalogViewModel.GetBuyProductButtonClassString(_repository, false) btn-lg" type="submit" id="card_on_transaction_buy_button">Buy</button>
                    </form>
                </div>

                <br>
                <p class="text-md-left">
                    You will have:
                    <mark>@CatalogViewModel.GetSelectedBuyProductPriceSentence(_repository)</mark>
                </p>
                <small class="text-warning @product.GetProductTableLinkClassString(_repository)">
                    Added @product.AddedDate.ToShortDateString()
                </small>
            }
            else
            {
                <div class="float-right">
                    <form asp-controller="Catalog" asp-action="SellProduct" method="post">
                        <input type="hidden" class="form-control" name="productName" id="productName" value=@product.Name />
                        <input type="hidden" class="form-control" name="productID" id="productID" value=@product.ID />
                        <button class="btn btn-primary btn-lg" type="submit" id="card_on_transaction_sell_button">Sell</button>
                    </form>
                </div>

                <br>
                <p class="text-md-left">
                    You will have:
                    <mark>@CatalogViewModel.GetSelectedSellProductPriceSentence(_repository)</mark>
                </p>
                <small class="text-warning @product.GetProductTableLinkClassString(_repository)">
                    Added @product.AddedDate.ToShortDateString()
                </small>
            }
        </div>
    </div>
    if (!product.OnlyRegisteredCanComment && product.OwnerID != CatalogViewModel.CurrentUser.ID)
    {
        <form asp-controller="Catalog" asp-action="AddComment" method="post">
            <div class="form-group">
                <label for="commentSection">Your comment:</label>
                <textarea class="form-control" maxlength="255" name="commentSection" id="commentSection" rows="3" placeholder="Enter comment"></textarea>
                <input type="hidden" class="form-control" name="productID" id="productID" value=@product.ID />
                <fieldset class="rating" name="rating-field" id="rating-field" style="float:right">
                    <input type="radio" id="star5" name="rating" value="5" /><label class="full" for="star5" title="Awesome - 5 stars"></label>
                    <input type="radio" id="star4half" name="rating" value="4.5" /><label class="half" for="star4half" title="Pretty good - 4.5 stars"></label>
                    <input type="radio" id="star4" name="rating" value="4" /><label class="full" for="star4" title="Pretty good - 4 stars"></label>
                    <input type="radio" id="star3half" name="rating" value="3.5" /><label class="half" for="star3half" title="Meh - 3.5 stars"></label>
                    <input type="radio" id="star3" name="rating" value="3" /><label class="full" for="star3" title="Meh - 3 stars"></label>
                    <input type="radio" id="star2half" name="rating" value="2.5" /><label class="half" for="star2half" title="Kinda bad - 2.5 stars"></label>
                    <input type="radio" id="star2" name="rating" value="2" /><label class="full" for="star2" title="Kinda bad - 2 stars"></label>
                    <input type="radio" id="star1half" name="rating" value="1.5" /><label class="half" for="star1half" title="Meh - 1.5 stars"></label>
                    <input type="radio" id="star1" name="rating" value="1" /><label class="full" for="star1" title="Sucks big time - 1 star"></label>
                    <input type="radio" id="starhalf" name="rating" value="0.5" /><label class="half" for="starhalf" title="Sucks big time - 0.5 stars"></label>
                </fieldset>
            </div>
            <button class="btn btn-success" type="submit">Submit</button>
        </form>

        //await Html.PartialAsync("_AddCommentPartial", new ViewDataDictionary(ViewData) { { "id", product.ID } });
        //<partial name=""_AddCommentPartial" view-data="product.ID.ToString()"/>
        //await Html.PartialAsync("_AddCommentPartial", product.ID.ToString());

        //<h1>Pure CSS Star Rating Widget</h1>
    }
    <div class="col col-sm-12 col-md-12 col-lg-6" style="padding-top: 2rem;">
        <div class="card h-100 hoverable-card" id="card_on_transaction">
            <div class="card-header @product.GetTableHeaderClassString(_repository)" id="card_on_transaction_header">
                <h5 style="font-weight:300">What people think about <strong>@product.Name</strong></h5>
                <p>RATE: @product.GetRate(_repository)</p>
                @for (int i = 0; i < 5; i++)
                {
                    if (ComparisonViewModel.GetStarsValue(product, _repository) >= i + 1)
                    {
                        <i class="fa fa-star checked"></i>
                    }
                    else
                    {
                        <i class="fa fa-star not-checked"></i>
                    }
                }
                <div id="left-rating-table">
                    <div class="row">
                        <div class="side left">
                            <div>5 star</div>
                        </div>
                        <div class="middle">
                            <div class="bar-container">
                                <div class="bar-5 lbar" id="lbar-5"></div>
                            </div>
                        </div>
                        <div class="side right">
                            <div>@product.GetStarsCount(5, _repository)</div>
                        </div>
                        <div class="side left">
                            <div>4 star</div>
                        </div>
                        <div class="middle">
                            <div class="bar-container">
                                <div class="bar-4 lbar" id="lbar-4"></div>
                            </div>
                        </div>
                        <div class="side right">
                            <div>@product.GetStarsCount(4, _repository)</div>
                        </div>
                        <div class="side left">
                            <div>3 star</div>
                        </div>
                        <div class="middle">
                            <div class="bar-container">
                                <div class="bar-3 lbar" id="lbar-3"></div>
                            </div>
                        </div>
                        <div class="side right">
                            <div>@product.GetStarsCount(3, _repository)</div>
                        </div>
                        <div class="side left">
                            <div>2 star</div>
                        </div>
                        <div class="middle">
                            <div class="bar-container">
                                <div class="bar-2 lbar" id="lbar-2"></div>
                            </div>
                        </div>
                        <div class="side right">
                            <div>@product.GetStarsCount(2, _repository)</div>
                        </div>
                        <div class="side left">
                            <div>1 star</div>
                        </div>
                        <div class="middle">
                            <div class="bar-container">
                                <div class="bar-1 lbar" id="lbar-1"></div>
                            </div>
                        </div>
                        <div class="side right">
                            <div>@product.GetStarsCount(1, _repository)</div>
                        </div>
                    </div>
                </div>
                <p class="text-center text-muted"><small><i>from total amount of <b>@product.GetTotalCountOfNotNulledComments(_repository)</b> rated comments</i></small></p>
            </div>
            <div class="card-body" style="transform:rotate(0);">
                @{
                    if (/*product.Comments != null*/_repository.GetUserCommentsByProdID(product.ID) != null)
                    {
                        foreach (var comment in /*product.Comments*/_repository.GetUserCommentsByProdID(product.ID))
                        {
                            if (WebMarket.Data.Userbase.GetUsername(comment.UserID)?.Length > 0)
                            {
                                <p><strong>@WebMarket.Data.Userbase.GetUsername(comment.UserID)</strong></p>
                            }
                            else
                            {
                                <p><strong>Anonymous</strong></p>
                            }
                            <p>@comment.Text</p>
                            if (comment.Rate > 0f)
                            {
                                for (int i = 0; i < 5; i++)
                                {
                                    if (Math.Truncate((decimal)comment.Rate) > i)
                                    {
                                        <i class="fa fa-star checked"></i>
                                    }
                                    else
                                    {
                                        <i class="fa fa-star not-checked"></i>
                                    }
                                }
                            }
                            <hr />
                        }
                    }
                    else
                    {
                        <p><strong>We can't render comments as this product don't have any...</strong></p>
                    }
                }
            </div>

        </div>
    </div>
}

@section Scripts
{
    <script>

        $(document).ready(function() {
            $($(".lbar").get().reverse()).each(function (index, element) {
                $(element).width(getFinalWidth(index+1)*100 + '%');
            });
        });

        function getFinalWidth(index) {
            switch (index) {
                case 1: return @CatalogViewModel.GetSelectedBuyProduct(_repository)?.GetStarsPercent(1, _repository);
                case 2: return @CatalogViewModel.GetSelectedBuyProduct(_repository)?.GetStarsPercent(2, _repository);
                case 3: return @CatalogViewModel.GetSelectedBuyProduct(_repository)?.GetStarsPercent(3, _repository);
                case 4: return @CatalogViewModel.GetSelectedBuyProduct(_repository)?.GetStarsPercent(4, _repository);
                case 5: return @CatalogViewModel.GetSelectedBuyProduct(_repository)?.GetStarsPercent(5, _repository);
            }
        };

    </script>
}

